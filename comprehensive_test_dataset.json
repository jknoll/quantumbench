{
  "problem_id": "comprehensive_test_bell_states",
  "prompt": "Implement parameterized Bell state preparation that can create any of the four Bell states based on the bell_type parameter. The implementation should work for bell_type values: 'phi_plus', 'phi_minus', 'psi_plus', 'psi_minus'.",
  "difficulty": "beginner",
  "category": "circuit_construction",
  "learning_objectives": [
    "Parameterized quantum circuits",
    "Bell state preparation variations",
    "Statistical validation methods"
  ],
  "prerequisites": [
    "Basic quantum gates"
  ],
  "reasoning_trace": "Bell states are maximally entangled two-qubit states that can be systematically prepared using different gate sequences. Each Bell state has distinct measurement correlations that can be verified statistically.",
  "parameter_specs": [
    {
      "name": "bell_type",
      "type": "discrete",
      "range": [
        "phi_plus",
        "phi_minus",
        "psi_plus",
        "psi_minus"
      ],
      "description": "Type of Bell state to prepare"
    }
  ],
  "test_cases": [
    {
      "input_params": {
        "bell_type": "phi_plus"
      },
      "expected_properties": {
        "entanglement": {
          "min": 0.9
        }
      }
    },
    {
      "input_params": {
        "bell_type": "phi_minus"
      },
      "expected_properties": {
        "entanglement": {
          "min": 0.9
        }
      }
    },
    {
      "input_params": {
        "bell_type": "psi_plus"
      },
      "expected_properties": {
        "entanglement": {
          "min": 0.9
        }
      }
    },
    {
      "input_params": {
        "bell_type": "psi_minus"
      },
      "expected_properties": {
        "entanglement": {
          "min": 0.9
        }
      }
    }
  ],
  "algorithm_type": "bell_state",
  "evaluation_method": "statistical_comparison",
  "solution": {
    "code": "\nimport numpy as np\nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister\nfrom qiskit_aer import AerSimulator\n\ndef create_bell_state(bell_type):\n    qr = QuantumRegister(2, 'q')\n    cr = ClassicalRegister(2, 'c')\n    circuit = QuantumCircuit(qr, cr)\n    \n    # All Bell states start with Hadamard\n    circuit.h(qr[0])\n    \n    # Apply gates based on Bell state type\n    if bell_type == 'phi_minus':\n        circuit.z(qr[0])\n    elif bell_type in ['psi_plus', 'psi_minus']:\n        if bell_type == 'psi_minus':\n            circuit.z(qr[0])\n    \n    # CNOT for entanglement\n    circuit.cx(qr[0], qr[1])\n    \n    # X gate for psi states\n    if bell_type in ['psi_plus', 'psi_minus']:\n        circuit.x(qr[1])\n    \n    circuit.measure(qr, cr)\n    return circuit\n\nbell_type = params['bell_type']\ncircuit = create_bell_state(bell_type)\nsimulator = AerSimulator()\njob = simulator.run(circuit, shots=shots)\nresult = job.result()\ncounts = result.get_counts()\n\nprint(f'Bell state: {bell_type}')\nprint(f'Counts: {counts}')\n",
    "output_interpretation": "Each Bell state should show characteristic correlation patterns in measurement outcomes."
  },
  "extensions": [
    "Extend to GHZ states",
    "Add Bell inequality tests"
  ]
}